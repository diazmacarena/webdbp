<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Pomodoro Cian</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&family=Roboto:wght@300;400;500&display=swap');
    
    * {
      box-sizing: border-box;
    }

    body {
      background: linear-gradient(135deg, #e0f7fa 0%, #b2ebf2 50%, #80deea 100%);
      color: #006064;
      font-family: 'Poppins', sans-serif;
      margin: 0;
      padding: 20px;
      min-height: 100vh;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      display: grid;
      grid-template-columns: 1fr 1fr;
      grid-template-rows: auto auto auto;
      gap: 30px;
      grid-template-areas: 
        "header header"
        "timer tasks"
        "controls tasks";
    }

    @media (max-width: 768px) {
      .container {
        grid-template-columns: 1fr;
        grid-template-areas: 
          "header"
          "timer"
          "controls"
          "tasks";
      }
    }

    .header {
      grid-area: header;
      text-align: center;
      margin-bottom: 20px;
    }

    h1 {
      font-size: 3.5rem;
      margin: 0;
      background: linear-gradient(45deg, #00838f, #0097a7);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .timer-section {
      grid-area: timer;
      background: rgba(255, 255, 255, 0.9);
      border-radius: 20px;
      padding: 40px;
      text-align: center;
      box-shadow: 0 8px 32px rgba(0, 150, 167, 0.2);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .timer {
      font-size: 5rem;
      font-weight: 700;
      color: #00838f;
      margin: 20px 0;
      text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .timer-label {
      font-size: 1.2rem;
      color: #00695c;
      margin-bottom: 20px;
      font-weight: 500;
    }

    .controls-section {
      grid-area: controls;
      background: rgba(255, 255, 255, 0.9);
      border-radius: 20px;
      padding: 30px;
      box-shadow: 0 8px 32px rgba(0, 150, 167, 0.2);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .buttons {
      display: flex;
      gap: 15px;
      justify-content: center;
      flex-wrap: wrap;
      margin-bottom: 30px;
    }

    button {
      background: linear-gradient(45deg, #00acc1, #00bcd4);
      color: white;
      border: none;
      padding: 12px 24px;
      font-size: 1.1rem;
      font-weight: 600;
      border-radius: 12px;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(0, 188, 212, 0.3);
      min-width: 120px;
    }

    button:hover {
      background: linear-gradient(45deg, #0097a7, #00acc1);
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(0, 188, 212, 0.4);
    }

    button:active {
      transform: translateY(0);
    }

    .counter {
      text-align: center;
      font-size: 1.1rem;
      color: #00695c;
      background: rgba(178, 235, 242, 0.5);
      padding: 20px;
      border-radius: 15px;
      margin-top: 20px;
    }

    .counter-item {
      display: inline-block;
      margin: 10px 20px;
      text-align: center;
    }

    .counter-number {
      display: block;
      font-size: 2rem;
      font-weight: 700;
      color: #00838f;
    }

    .task-section {
      grid-area: tasks;
      background: rgba(255, 255, 255, 0.95);
      border-radius: 20px;
      padding: 30px;
      box-shadow: 0 8px 32px rgba(0, 150, 167, 0.2);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.3);
      max-height: 70vh;
      overflow-y: auto;
    }

    .task-section h2 {
      color: #00838f;
      margin-bottom: 20px;
      font-size: 1.8rem;
      text-align: center;
    }

    .add-task-form {
      display: flex;
      gap: 10px;
      margin-bottom: 25px;
      padding: 20px;
      background: rgba(224, 247, 250, 0.5);
      border-radius: 15px;
    }

    .add-task-form input {
      flex: 1;
      padding: 12px 16px;
      border: 2px solid #b2ebf2;
      border-radius: 10px;
      font-size: 1rem;
      color: #00695c;
      background: white;
      transition: border-color 0.3s ease;
    }

    .add-task-form input:focus {
      outline: none;
      border-color: #00acc1;
      box-shadow: 0 0 0 3px rgba(0, 188, 212, 0.1);
    }

    .add-task-form button {
      padding: 12px 20px;
      min-width: auto;
      white-space: nowrap;
    }

    .task-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .task-list li {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px 20px;
      margin: 10px 0;
      background: linear-gradient(135deg, #e0f7fa, #f0fdff);
      border-radius: 12px;
      border-left: 4px solid #00bcd4;
      transition: all 0.3s ease;
      box-shadow: 0 2px 8px rgba(0, 188, 212, 0.1);
    }

    .task-list li:hover {
      transform: translateX(5px);
      box-shadow: 0 4px 12px rgba(0, 188, 212, 0.2);
    }

    .task-list li.completed {
      text-decoration: line-through;
      opacity: 0.6;
      background: linear-gradient(135deg, #f5f5f5, #eeeeee);
      border-left-color: #9e9e9e;
    }

    .task-text {
      flex: 1;
      font-size: 1rem;
      color: #00695c;
      font-weight: 500;
    }

    .task-actions {
      display: flex;
      gap: 8px;
    }

    .task-actions button {
      padding: 8px 12px;
      font-size: 0.9rem;
      min-width: auto;
      margin: 0;
    }

    .task-actions button.complete-btn {
      background: linear-gradient(45deg, #4caf50, #66bb6a);
    }

    .task-actions button.complete-btn:hover {
      background: linear-gradient(45deg, #43a047, #4caf50);
    }

    .task-actions button.delete-btn {
      background: linear-gradient(45deg, #f44336, #ef5350);
    }

    .task-actions button.delete-btn:hover {
      background: linear-gradient(45deg, #d32f2f, #f44336);
    }

    .home-button {
      background: linear-gradient(45deg, #607d8b, #78909c);
      color: white;
      border: none;
      padding: 15px 30px;
      border-radius: 12px;
      font-size: 1.1rem;
      font-weight: 600;
      cursor: pointer;
      text-decoration: none;
      display: inline-block;
      box-shadow: 0 4px 15px rgba(96, 125, 139, 0.3);
      transition: all 0.3s ease;
      margin: 20px auto;
      text-align: center;
    }

    .home-button:hover {
      background: linear-gradient(45deg, #546e7a, #607d8b);
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(96, 125, 139, 0.4);
    }

    .home-container {
      text-align: center;
      margin-top: 30px;
      grid-column: 1 / -1;
    }

    /* Scrollbar personalizada */
    .task-section::-webkit-scrollbar {
      width: 8px;
    }

    .task-section::-webkit-scrollbar-track {
      background: rgba(178, 235, 242, 0.2);
      border-radius: 4px;
    }

    .task-section::-webkit-scrollbar-thumb {
      background: linear-gradient(45deg, #00acc1, #00bcd4);
      border-radius: 4px;
    }

    .task-section::-webkit-scrollbar-thumb:hover {
      background: linear-gradient(45deg, #0097a7, #00acc1);
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>üåä Temporizador Pomodoro üåä</h1>
    </div>

    <div class="timer-section">
      <div class="timer-label" id="sessionLabel">Sesi√≥n de Estudio</div>
      <div class="timer" id="timer">25:00</div>
    </div>

    <div class="controls-section">
      <div class="buttons">
        <button onclick="startTimer()">‚ñ∂Ô∏è Iniciar</button>
        <button onclick="pauseTimer()">‚è∏Ô∏è Pausar</button>
        <button onclick="resetTimer()">üîÑ Reiniciar</button>
      </div>

      <div class="counter">
        <div class="counter-item">
          <span class="counter-number" id="studyCount">0</span>
          <span>Sesiones de Estudio</span>
        </div>
        <div class="counter-item">
          <span class="counter-number" id="breakCount">0</span>
          <span>Descansos</span>
        </div>
      </div>
    </div>

    <div class="task-section">
      <h2>üìã Lista de Tareas</h2>
      
      <form class="add-task-form" id="formNuevaTarea">
        <input type="text" id="inputTarea" placeholder="Escribe una nueva tarea..." required />
        <button type="submit">‚ûï Agregar</button>
      </form>

      <ul class="task-list" id="taskList">
        <!-- Las tareas se cargar√°n aqu√≠ din√°micamente -->
      </ul>
    </div>

    <div class="home-container">
      <a href="/" class="home-button">üè† Volver al Inicio</a>
    </div>
  </div>

  <script>
  // Asumimos que esta variable viene del backend en el HTML
  // Ejemplo en EJS: let tasks = <%- JSON.stringify(tareas) %>;
  // Si no existe, inicializamos como array vac√≠o para evitar errores
  let tasks = window.tasks || [];

  let studyDuration = 1 * 60;
  let breakDuration = 1 * 60;
  let currentTime = studyDuration;
  let isRunning = false;
  let isStudySession = true;
  let timerInterval;
  let studyCount = 0;
  let breakCount = 0;
  let horaEntrada = new Date().toISOString();

  const timerDisplay = document.getElementById("timer");
  const studyCountDisplay = document.getElementById("studyCount");
  const breakCountDisplay = document.getElementById("breakCount");
  const sessionLabel = document.getElementById("sessionLabel");
  const taskList = document.getElementById("taskList");

  function updateDisplay() {
    const minutes = String(Math.floor(currentTime / 60)).padStart(2, '0');
    const seconds = String(currentTime % 60).padStart(2, '0');
    timerDisplay.textContent = `${minutes}:${seconds}`;

    sessionLabel.textContent = isStudySession ? "Sesi√≥n de Estudio" : "Descanso";
  }

  function startTimer() {
    if (isRunning) return;
    isRunning = true;

    if (isStudySession) {
      horaEntrada = new Date().toISOString();
    }

    timerInterval = setInterval(() => {
      currentTime--;
      updateDisplay();
      if (currentTime <= 0) {
        clearInterval(timerInterval);
        isRunning = false;

        if (isStudySession) {
          studyCount++;
          studyCountDisplay.textContent = studyCount;
          currentTime = breakDuration;
        } else {
          breakCount++;
          breakCountDisplay.textContent = breakCount;
          currentTime = studyDuration;
        }

        guardarSesionPomodoro();

        isStudySession = !isStudySession;
        updateDisplay();

        setTimeout(() => startTimer(), 1000);
      }
    }, 1000);
  }

  function pauseTimer() {
    clearInterval(timerInterval);
    isRunning = false;
  }

  function resetTimer() {
    clearInterval(timerInterval);
    isRunning = false;
    currentTime = isStudySession ? studyDuration : breakDuration;
    updateDisplay();
  }

  function guardarSesionPomodoro() {
    fetch('/guardar-pomodoro', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        horaEntrada: isStudySession ? horaEntrada : null,
        sesionesCompletadas: studyCount,
        descansos: breakCount
      })
    })
    .then(response => response.json())
    .then(data => {
      console.log('Sesi√≥n guardada:', data);
    })
    .catch(error => {
      console.error('Error al guardar sesi√≥n:', error);
    });
  }

  // Renderiza las tareas en la lista
  function renderTasks() {
    taskList.innerHTML = '';
    tasks.forEach(task => {
      const li = document.createElement('li');
      li.setAttribute('data-id', task.id);
      li.className = task.completada ? 'completed' : '';

      li.innerHTML = `
        <span class="task-text">${task.descripcion}</span>
        <div class="task-actions">
          ${!task.completada ? `<button class="complete-btn" onclick="completarTarea('${task.id}')">‚úÖ Completar</button>` : ''}
          <button class="delete-btn" onclick="eliminarTarea('${task.id}')">üóëÔ∏è Eliminar</button>
        </div>
      `;

      taskList.appendChild(li);
    });
  }

  // Completar tarea: llama al backend y actualiza localmente si OK
  function completarTarea(id) {
    fetch('/completar-tarea', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ tareaId: id })
    })
    .then(res => res.json())
    .then(() => {
      const task = tasks.find(t => t.id === id);
      if (task) {
        task.completada = true;
        renderTasks();
      }
    })
    .catch(console.error);
  }

  // Eliminar tarea: llama al backend y actualiza localmente si OK
  function eliminarTarea(id) {
    fetch(`/eliminar-tarea/${id}`, {
      method: 'DELETE'
    })
    .then(res => res.json())
    .then(() => {
      tasks = tasks.filter(t => t.id !== id);
      renderTasks();
    })
    .catch(console.error);
  }

  // Agregar nueva tarea al backend y luego renderiza
  document.getElementById('formNuevaTarea').addEventListener('submit', function (e) {
    e.preventDefault();
    const descripcion = document.getElementById('inputTarea').value.trim();
    if (!descripcion) return;

    fetch('/agregar-tarea', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ descripcion })
    })
    .then(res => res.json())
    .then(data => {
      tasks.push(data);  // data incluye id, descripcion, completada
      renderTasks();
      document.getElementById('inputTarea').value = '';
    })
    .catch(console.error);
  });

  // Manejar cierre de ventana (puedes mejorar para enviar estados completos si quieres)
  window.addEventListener('beforeunload', () => {
    if (studyCount > 0) {
      const data = {
        horaEntrada: horaEntrada,
        horaSalida: new Date().toISOString(),
        sesionesCompletadas: studyCount
      };

      const blob = new Blob([JSON.stringify(data)], {
        type: 'application/json'
      });

      navigator.sendBeacon('/guardar-pomodoro', blob);
    }
  });

  // Inicializaci√≥n
  updateDisplay();
  renderTasks();
</script>
</body>
</html>
